name:
  build-openwrt

on:
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: "set openwrt's source code's brach or tag or commit id(sha1 value)"
        required: true
        type: string
        default: "master"
      wrtx_version:
        description: "set wrtx's source code's brach or tag or commit id(sha1 value)"
        required: true
        type: string
        default: "dev"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
      - name: checkout
        uses: actions/checkout@v4

      - name: setup go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.3

      - name: setup openwrt build environ
        run: sudo apt update && sudo apt -y install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget libpcre2-dev && echo "status=success" >> $GITHUB_OUTPUT

      - name: clone wrtx
        run: |
          mkdir wrtx
          cd wrtx
          git init
          git remote add origin https://github.com/wrtx-dev/wrtx.git
          git fetch origin ${{ inputs.wrtx_version }}
          git reset --hard FETCH_HEAD

      -name: build wrtx
        run: cd wrtx && make && echo "WRTX_BIN=$(pwd)/wrtx" >> $GITHUB_ENV && echo "WRTX_VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: clone openwrt
        run: bash clone_openwrt.sh ${{ inputs.openwrt_version }}
      
      - name: update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: copy .config file
        run: cp x86_64-config openwrt/.config

      - name: build openwrt
        id: build
        run: cd openwrt && make -j$(($(nproc) *2)) && echo "status=success" >> $GITHUB_OUTPUT

      - name: pick files
        id: pick
        if: steps.build.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$(ls *.rootfs.tar.gz)" >>$GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: unpack openwrt rootfs
        id: unpack
        if: steps.pick.outputs.status == 'success' && !cancelled()
        run: |
          mkdir openwrt_rootfs
          tar xvzf ${{ env.FIRMWARE }} -C openwrt_rootfs
          echo "status=success" >> $GITHUB_OUTPUT

      - name: make deb package
        id: pack
        if: steps.unpack.outputs.status == 'success' && !cancelled()
        run: |
          pack_deb.sh $(pwd)/openwrt_rootfs ${{ env.WRTX_BIN }} ${{ env.WRTX_VERSION }}
          echo "status == success" >> $GITHUB_OUTPUT

      - name: artifact
        uses: actions/upload-artifact@v4
        if: steps.pack.outputs.status == 'success' && !cancelled()
        with:
          name: openwrt_rootfs
          path: ./*.deb